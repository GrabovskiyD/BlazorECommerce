@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject ICartService CartService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<EditForm Model="user" OnValidSubmit="HandleLoginAsync">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.Email)" class="text-danger mt-3" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => user.Password)" class="text-danger mt-3" />
    </div>
    <button type="submit" class="btn btn-primary">
        Login
    </button>
</EditForm>
<div class="text-danger mt-3">
    <span>@errorMessage</span>
</div>

@code {
    private UserLogin user = new UserLogin();
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLoginAsync()
    {
        var result = await AuthService.LoginAsync(user);
        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItemsAsync(true);
            await CartService.GetCartItemsCountAsync();
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }

    }
}
